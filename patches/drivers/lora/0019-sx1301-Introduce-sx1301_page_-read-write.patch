From 92cc18702f1a358293dd3fc266da1afdfc352571 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20F=C3=A4rber?= <afaerber@suse.de>
Date: Mon, 2 Jul 2018 03:11:32 +0200
Subject: [PATCH 19/64] sx1301: Introduce sx1301_page_{read,write}()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Andreas FÃ¤rber <afaerber@suse.de>
---
 drivers/net/lora/sx1301.c | 68 +++++++++++++++++++++------------------
 1 file changed, 37 insertions(+), 31 deletions(-)

diff --git a/drivers/net/lora/sx1301.c b/drivers/net/lora/sx1301.c
index 21973206efff..53c56a0b3d19 100644
--- a/drivers/net/lora/sx1301.c
+++ b/drivers/net/lora/sx1301.c
@@ -91,6 +91,28 @@ static int sx1301_page_switch(struct spi_device *spi, u8 page)
 	return 0;
 }
 
+static int sx1301_page_read(struct spi_device *spi, u8 page, u8 reg, u8 *val)
+{
+	int ret;
+
+	ret = sx1301_page_switch(spi, page);
+	if (ret)
+		return ret;
+
+	return sx1301_read(spi, reg, val);
+}
+
+static int sx1301_page_write(struct spi_device *spi, u8 page, u8 reg, u8 val)
+{
+	int ret;
+
+	ret = sx1301_page_switch(spi, page);
+	if (ret)
+		return ret;
+
+	return sx1301_write(spi, reg, val);
+}
+
 static int sx1301_soft_reset(struct spi_device *spi)
 {
 	return sx1301_write(spi, REG_PAGE_RESET, REG_PAGE_RESET_SOFT_RESET);
@@ -109,13 +131,7 @@ static int sx1301_radio_set_cs(struct spi_controller *ctrl, bool enable)
 
 	dev_dbg(&ctrl->dev, "setting CS to %s\n", enable ? "1" : "0");
 
-	ret = sx1301_page_switch(ssx->parent, ssx->page);
-	if (ret) {
-		dev_warn(&ctrl->dev, "failed to switch page for CS (%d)\n", ret);
-		return ret;
-	}
-
-	ret = sx1301_read(ssx->parent, ssx->regs + REG_RADIO_X_CS, &cs);
+	ret = sx1301_page_read(ssx->parent, ssx->page, ssx->regs + REG_RADIO_X_CS, &cs);
 	if (ret) {
 		dev_warn(&ctrl->dev, "failed to read CS (%d)\n", ret);
 		cs = 0;
@@ -126,9 +142,11 @@ static int sx1301_radio_set_cs(struct spi_controller *ctrl, bool enable)
 	else
 		cs &= ~BIT(0);
 
-	ret = sx1301_write(ssx->parent, ssx->regs + REG_RADIO_X_CS, cs);
-	if (ret)
-		dev_warn(&ctrl->dev, "failed to write CS (%d)\n", ret);
+	ret = sx1301_page_write(ssx->parent, ssx->page, ssx->regs + REG_RADIO_X_CS, cs);
+	if (ret) {
+		dev_err(&ctrl->dev, "failed to write CS (%d)\n", ret);
+		return ret;
+	}
 
 	return 0;
 }
@@ -160,20 +178,14 @@ static int sx1301_radio_spi_transfer_one(struct spi_controller *ctrl,
 
 	dev_dbg(&spi->dev, "transferring one (%u)\n", xfr->len);
 
-	ret = sx1301_page_switch(ssx->parent, ssx->page);
-	if (ret) {
-		dev_err(&spi->dev, "failed to switch page for transfer (%d)\n", ret);
-		return ret;
-	}
-
 	if (tx_buf) {
-		ret = sx1301_write(ssx->parent, ssx->regs + REG_RADIO_X_ADDR, tx_buf ? tx_buf[0] : 0);
+		ret = sx1301_page_write(ssx->parent, ssx->page, ssx->regs + REG_RADIO_X_ADDR, tx_buf ? tx_buf[0] : 0);
 		if (ret) {
 			dev_err(&spi->dev, "SPI radio address write failed\n");
 			return ret;
 		}
 
-		ret = sx1301_write(ssx->parent, ssx->regs + REG_RADIO_X_DATA, (tx_buf && xfr->len >= 2) ? tx_buf[1] : 0);
+		ret = sx1301_page_write(ssx->parent, ssx->page, ssx->regs + REG_RADIO_X_DATA, (tx_buf && xfr->len >= 2) ? tx_buf[1] : 0);
 		if (ret) {
 			dev_err(&spi->dev, "SPI radio data write failed\n");
 			return ret;
@@ -193,7 +205,7 @@ static int sx1301_radio_spi_transfer_one(struct spi_controller *ctrl,
 	}
 
 	if (rx_buf) {
-		ret = sx1301_read(ssx->parent, ssx->regs + REG_RADIO_X_DATA_READBACK, &rx_buf[xfr->len - 1]);
+		ret = sx1301_page_read(ssx->parent, ssx->page, ssx->regs + REG_RADIO_X_DATA_READBACK, &rx_buf[xfr->len - 1]);
 		if (ret) {
 			dev_err(&spi->dev, "SPI radio data read failed\n");
 			return ret;
@@ -298,13 +310,7 @@ static int sx1301_probe(struct spi_device *spi)
 		return ret;
 	}
 
-	ret = sx1301_page_switch(spi, 2);
-	if (ret) {
-		dev_err(&spi->dev, "page 2 switch failed\n");
-		return ret;
-	}
-
-	ret = sx1301_read(spi, 43, &val);
+	ret = sx1301_page_read(spi, 2, 43, &val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 read failed\n");
 		return ret;
@@ -312,7 +318,7 @@ static int sx1301_probe(struct spi_device *spi)
 
 	val |= REG_2_43_RADIO_B_EN | REG_2_43_RADIO_A_EN;
 
-	ret = sx1301_write(spi, 43, val);
+	ret = sx1301_page_write(spi, 2, 43, val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 write failed\n");
 		return ret;
@@ -320,7 +326,7 @@ static int sx1301_probe(struct spi_device *spi)
 
 	msleep(500);
 
-	ret = sx1301_read(spi, 43, &val);
+	ret = sx1301_page_read(spi, 2, 43, &val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 read failed\n");
 		return ret;
@@ -328,7 +334,7 @@ static int sx1301_probe(struct spi_device *spi)
 
 	val |= REG_2_43_RADIO_RST;
 
-	ret = sx1301_write(spi, 43, val);
+	ret = sx1301_page_write(spi, 2, 43, val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 write failed\n");
 		return ret;
@@ -336,7 +342,7 @@ static int sx1301_probe(struct spi_device *spi)
 
 	msleep(5);
 
-	ret = sx1301_read(spi, 43, &val);
+	ret = sx1301_page_read(spi, 2, 43, &val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 read failed\n");
 		return ret;
@@ -344,7 +350,7 @@ static int sx1301_probe(struct spi_device *spi)
 
 	val &= ~REG_2_43_RADIO_RST;
 
-	ret = sx1301_write(spi, 43, val);
+	ret = sx1301_page_write(spi, 2, 43, val);
 	if (ret) {
 		dev_err(&spi->dev, "2|43 write failed\n");
 		return ret;
-- 
2.19.1

