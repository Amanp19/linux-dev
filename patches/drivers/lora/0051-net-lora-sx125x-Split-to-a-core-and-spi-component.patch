From 8583fc4d1338cc9d28c91f7130e0aac65b9dab87 Mon Sep 17 00:00:00 2001
From: Ben Whitten <ben.whitten@gmail.com>
Date: Thu, 9 Aug 2018 18:10:29 +0100
Subject: [PATCH 51/64] net: lora: sx125x: Split to a core and spi component
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

As part of splitting out we need a common core with spi and regmap_bus
backing. This initially splits out spi.

Tested and functionally identical, you need to modprobe lora-sx125x
prior to lora-sx1301 because once calibration is done the concentrator
takes control of the radio interface.
This way around the radio probes before the calibration is complete and
can read the version.

Signed-off-by: Ben Whitten <ben.whitten@gmail.com>
[AF: Merged into one file, changed Kconfig accordingly]
Signed-off-by: Andreas Färber <afaerber@suse.de>
---
 drivers/net/lora/Kconfig  |  19 +++-
 drivers/net/lora/Makefile |   4 +-
 drivers/net/lora/sx1257.c | 133 ----------------------------
 drivers/net/lora/sx125x.c | 176 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 193 insertions(+), 139 deletions(-)
 delete mode 100644 drivers/net/lora/sx1257.c
 create mode 100644 drivers/net/lora/sx125x.c

diff --git a/drivers/net/lora/Kconfig b/drivers/net/lora/Kconfig
index 01397626012d..60c86c7c517b 100644
--- a/drivers/net/lora/Kconfig
+++ b/drivers/net/lora/Kconfig
@@ -31,13 +31,24 @@ config LORA_RN2483
 	help
 	  Microchip RN2483/2903
 
-config LORA_SX1257
-	tristate "Semtech SX125x SPI driver"
-	default y
+config LORA_SX125X_CORE
+	tristate
+
+config LORA_SX125X
+	tristate "Semtech SX125x driver"
+	depends on SPI || LORA_SX1301
+	help
+	  Semtech SX1255/1257 driver
+
+config LORA_SX125X_SPI
+	bool "Semtech SX125x SPI driver"
+	default n
+	depends on LORA_SX125X
 	depends on SPI
 	select REGMAP_SPI
+	select LORA_SX125X_CORE
 	help
-	  Semtech SX1255/1257
+	  Semtech SX1255/1257 SPI driver
 
 config LORA_SX1276
 	tristate "Semtech SX127x SPI driver"
diff --git a/drivers/net/lora/Makefile b/drivers/net/lora/Makefile
index ac24733f1d6b..995fca248616 100644
--- a/drivers/net/lora/Makefile
+++ b/drivers/net/lora/Makefile
@@ -16,8 +16,8 @@ obj-$(CONFIG_LORA_RN2483) += lora-rn2483.o
 lora-rn2483-y := rn2483.o
 lora-rn2483-y += rn2483_cmd.o
 
-obj-$(CONFIG_LORA_SX1257) += lora-sx1257.o
-lora-sx1257-y := sx1257.o
+obj-$(CONFIG_LORA_SX125X_CORE) += lora-sx125x.o
+lora-sx125x-y := sx125x.o
 
 obj-$(CONFIG_LORA_SX1276) += lora-sx1276.o
 lora-sx1276-y := sx1276.o
diff --git a/drivers/net/lora/sx1257.c b/drivers/net/lora/sx1257.c
deleted file mode 100644
index 78180877a6be..000000000000
--- a/drivers/net/lora/sx1257.c
+++ /dev/null
@@ -1,133 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
-/*
- * Semtech SX1255/SX1257 LoRa transceiver
- *
- * Copyright (c) 2018 Andreas Färber
- * Copyright (c) 2018 Ben Whitten
- *
- * Based on SX1301 HAL code:
- * Copyright (c) 2013 Semtech-Cycleo
- */
-
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/of_device.h>
-#include <linux/regmap.h>
-#include <linux/spi/spi.h>
-
-#include "sx125x.h"
-
-#define REG_CLK_SELECT_TX_DAC_CLK_SELECT_CLK_IN	BIT(0)
-#define REG_CLK_SELECT_CLK_OUT			BIT(1)
-
-static struct regmap_config sx125x_spi_regmap_config = {
-	.reg_bits = 8,
-	.val_bits = 8,
-
-	.cache_type = REGCACHE_NONE,
-
-	.read_flag_mask = 0,
-	.write_flag_mask = BIT(7),
-
-	.max_register = SX125X_MAX_REGISTER,
-};
-
-struct sx125x_priv {
-	struct regmap		*regmap;
-};
-
-static int sx1257_probe(struct spi_device *spi)
-{
-	struct sx125x_priv *priv;
-	unsigned int val;
-	int ret;
-
-	spi->mode = SPI_MODE_0;
-	spi->bits_per_word = 8;
-	spi->max_speed_hz = 10000000;
-	ret = spi_setup(spi);
-	if (ret) {
-		dev_err(&spi->dev, "SPI setup failed.\n");
-		return ret;
-	}
-
-	priv = devm_kzalloc(&spi->dev, sizeof(*priv), GFP_KERNEL);
-	if (!priv)
-		return -ENOMEM;
-
-	dev_set_drvdata(&spi->dev, priv);
-
-	priv->regmap = devm_regmap_init_spi(spi, &sx125x_spi_regmap_config);
-	if (IS_ERR(priv->regmap)) {
-		ret = PTR_ERR(priv->regmap);
-		dev_err(&spi->dev, "Regmap allocation failed: %d\n", ret);
-		return ret;
-	}
-
-	if (false) {
-		ret = regmap_read(priv->regmap, SX1255_VERSION, &val);
-		if (ret) {
-			dev_err(&spi->dev, "version read failed\n");
-			return ret;
-		}
-		dev_info(&spi->dev, "SX125x version: %02x\n", val);
-	}
-
-	val = REG_CLK_SELECT_TX_DAC_CLK_SELECT_CLK_IN;
-	if (strcmp(spi->controller->dev.of_node->name, "radio-b") == 0) { /* HACK */
-		val |= REG_CLK_SELECT_CLK_OUT;
-		dev_info(&spi->dev, "enabling clock output\n");
-	}
-
-	ret = regmap_write(priv->regmap, SX125X_CLK_SELECT, val);
-	if (ret) {
-		dev_err(&spi->dev, "clk write failed\n");
-		return ret;
-	}
-
-	dev_dbg(&spi->dev, "clk written\n");
-
-	if (true) {
-		ret = regmap_write(priv->regmap, SX1257_XOSC, 13 + 2 * 16);
-		if (ret) {
-			dev_err(&spi->dev, "xosc write failed\n");
-			return ret;
-		}
-	}
-
-	dev_info(&spi->dev, "SX1257 module probed\n");
-
-	return 0;
-}
-
-static int sx1257_remove(struct spi_device *spi)
-{
-	dev_info(&spi->dev, "SX1257 module removed\n");
-
-	return 0;
-}
-
-#ifdef CONFIG_OF
-static const struct of_device_id sx1257_dt_ids[] = {
-	{ .compatible = "semtech,sx1255" },
-	{ .compatible = "semtech,sx1257" },
-	{}
-};
-MODULE_DEVICE_TABLE(of, sx1257_dt_ids);
-#endif
-
-static struct spi_driver sx1257_spi_driver = {
-	.driver = {
-		.name = "sx1257",
-		.of_match_table = of_match_ptr(sx1257_dt_ids),
-	},
-	.probe = sx1257_probe,
-	.remove = sx1257_remove,
-};
-
-module_spi_driver(sx1257_spi_driver);
-
-MODULE_DESCRIPTION("SX1257 SPI driver");
-MODULE_AUTHOR("Andreas Färber <afaerber@suse.de>");
-MODULE_AUTHOR("Ben Whitten <ben.whitten@gmail.com>");
-MODULE_LICENSE("GPL");
diff --git a/drivers/net/lora/sx125x.c b/drivers/net/lora/sx125x.c
new file mode 100644
index 000000000000..ec99d6c845eb
--- /dev/null
+++ b/drivers/net/lora/sx125x.c
@@ -0,0 +1,176 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Semtech SX1255/SX1257 LoRa transceiver
+ *
+ * Copyright (c) 2018 Andreas Färber
+ * Copyright (c) 2018 Ben Whitten
+ *
+ * Based on SX1301 HAL code:
+ * Copyright (c) 2013 Semtech-Cycleo
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+
+#ifdef CONFIG_LORA_SX125X_SPI
+#include <linux/spi/spi.h>
+#endif
+
+#include "sx125x.h"
+
+#define REG_CLK_SELECT_TX_DAC_CLK_SELECT_CLK_IN	BIT(0)
+#define REG_CLK_SELECT_CLK_OUT			BIT(1)
+
+struct sx125x_priv {
+	struct regmap		*regmap;
+};
+
+static struct regmap_config __maybe_unused sx125x_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+
+	.cache_type = REGCACHE_NONE,
+
+	.read_flag_mask = 0,
+	.write_flag_mask = BIT(7),
+
+	.max_register = SX125X_MAX_REGISTER,
+};
+
+static int __maybe_unused sx125x_regmap_probe(struct device *dev, struct regmap *regmap, unsigned int radio)
+{
+	struct sx125x_priv *priv;
+	unsigned int val;
+	int ret;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	dev_set_drvdata(dev, priv);
+	priv->regmap = regmap;
+
+	if (false) {
+		ret = regmap_read(priv->regmap, SX1255_VERSION, &val);
+		if (ret) {
+			dev_err(dev, "version read failed\n");
+			return ret;
+		}
+		dev_info(dev, "SX125x version: %02x\n", val);
+	}
+
+	val = REG_CLK_SELECT_TX_DAC_CLK_SELECT_CLK_IN;
+	if (radio == 1) { /* HACK */
+		val |= REG_CLK_SELECT_CLK_OUT;
+		dev_info(dev, "enabling clock output\n");
+	}
+
+	ret = regmap_write(priv->regmap, SX125X_CLK_SELECT, val);
+	if (ret) {
+		dev_err(dev, "clk write failed\n");
+		return ret;
+	}
+
+	dev_dbg(dev, "clk written\n");
+
+	if (true) {
+		ret = regmap_write(priv->regmap, SX1257_XOSC, 13 + 2 * 16);
+		if (ret) {
+			dev_err(dev, "xosc write failed\n");
+			return ret;
+		}
+	}
+
+	dev_info(dev, "SX125x module probed\n");
+
+	return 0;
+}
+
+static int __maybe_unused sx125x_regmap_remove(struct device *dev)
+{
+	dev_info(dev, "SX125x module removed\n");
+
+	return 0;
+}
+
+#ifdef CONFIG_LORA_SX125X_SPI
+static int sx125x_spi_probe(struct spi_device *spi)
+{
+	struct regmap *regmap;
+	unsigned int radio;
+	int ret;
+
+	spi->mode = SPI_MODE_0;
+	spi->bits_per_word = 8;
+	spi->max_speed_hz = 10000000;
+	ret = spi_setup(spi);
+	if (ret < 0) {
+		dev_err(&spi->dev, "SPI setup failed.\n");
+		return ret;
+	}
+
+	regmap = devm_regmap_init_spi(spi, &sx125x_regmap_config);
+	if (IS_ERR(regmap)) {
+		ret = PTR_ERR(regmap);
+		dev_err(&spi->dev, "Regmap allocation failed: %d\n", ret);
+		return ret;
+	}
+
+	radio = (strcmp(spi->dev.parent->of_node->name, "radio-b") == 0) ? 1 : 0;
+	return sx125x_regmap_probe(&spi->dev, regmap, radio);
+}
+
+static int sx125x_spi_remove(struct spi_device *spi)
+{
+	return sx125x_regmap_remove(&spi->dev);
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id sx125x_spi_of_match[] = {
+	{ .compatible = "semtech,sx1255" },
+	{ .compatible = "semtech,sx1257" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, sx125x_spi_of_match);
+#endif
+
+static struct spi_driver sx125x_spi_driver = {
+	.probe  = sx125x_spi_probe,
+	.remove = sx125x_spi_remove,
+	.driver = {
+		.name = "sx125x_spi",
+		.of_match_table = of_match_ptr(sx125x_spi_of_match),
+	},
+};
+#endif
+
+static int __init sx125x_init(void)
+{
+	int ret = 0;
+
+#ifdef CONFIG_LORA_SX125X_SPI
+	ret = spi_register_driver(&sx125x_spi_driver);
+	if (ret < 0) {
+		pr_err("failed to init sx125x spi (%d)\n", ret);
+		return ret;
+	}
+#endif
+
+	return ret;
+}
+module_init(sx125x_init);
+
+static void __exit sx125x_exit(void)
+{
+#ifdef CONFIG_LORA_SX125X_SPI
+	spi_unregister_driver(&sx125x_spi_driver);
+#endif
+}
+module_exit(sx125x_exit);
+
+MODULE_DESCRIPTION("Semtech SX125x LoRa Radio Driver");
+MODULE_AUTHOR("Andreas Färber <afaerber@suse.de>");
+MODULE_AUTHOR("Ben Whitten <ben.whitten@gmail.com>");
+MODULE_LICENSE("GPL");
-- 
2.19.1

