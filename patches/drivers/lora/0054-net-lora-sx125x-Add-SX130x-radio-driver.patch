From 30de122bfb31d45363f7ffe52bc7ced731f9222e Mon Sep 17 00:00:00 2001
From: Ben Whitten <ben.whitten@gmail.com>
Date: Thu, 9 Aug 2018 18:29:59 +0100
Subject: [PATCH 54/64] net: lora: sx125x: Add SX130x radio driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

As part of the split we now add a regmap_bus backed version of the sx125x
shim so that it can work on the back of the sx1301 concentrator.

Signed-off-by: Ben Whitten <ben.whitten@gmail.com>
Co-Developed-by: Andreas Färber <afaerber@suse.de>
Signed-off-by: Andreas Färber <afaerber@suse.de>
---
 drivers/net/lora/Kconfig  | 10 +++++++
 drivers/net/lora/sx125x.c | 57 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+)

diff --git a/drivers/net/lora/Kconfig b/drivers/net/lora/Kconfig
index 60c86c7c517b..a6f0312d78ac 100644
--- a/drivers/net/lora/Kconfig
+++ b/drivers/net/lora/Kconfig
@@ -50,6 +50,16 @@ config LORA_SX125X_SPI
 	help
 	  Semtech SX1255/1257 SPI driver
 
+config LORA_SX125X_CON
+	bool "Semtech SX125x concentrator driver"
+	default y
+	depends on LORA_SX125X
+	depends on LORA_SX1301
+	select REGMAP
+	select LORA_SX125X_CORE
+	help
+	  Semtech SX1255/1257 concentrator driver
+
 config LORA_SX1276
 	tristate "Semtech SX127x SPI driver"
 	default y
diff --git a/drivers/net/lora/sx125x.c b/drivers/net/lora/sx125x.c
index ec99d6c845eb..3476a59ab19e 100644
--- a/drivers/net/lora/sx125x.c
+++ b/drivers/net/lora/sx125x.c
@@ -18,6 +18,11 @@
 #include <linux/spi/spi.h>
 #endif
 
+#ifdef CONFIG_LORA_SX125X_CON
+#include <linux/platform_device.h>
+#include <linux/lora/sx130x.h>
+#endif
+
 #include "sx125x.h"
 
 #define REG_CLK_SELECT_TX_DAC_CLK_SELECT_CLK_IN	BIT(0)
@@ -95,6 +100,48 @@ static int __maybe_unused sx125x_regmap_remove(struct device *dev)
 	return 0;
 }
 
+#ifdef CONFIG_LORA_SX125X_CON
+static int sx125x_con_probe(struct sx130x_radio_device *rdev)
+{
+	struct device *dev = &rdev->dev;
+	struct regmap *regmap;
+	int ret;
+
+	regmap = devm_regmap_init(dev, rdev->regmap_bus, rdev,
+			&sx125x_regmap_config);
+	if (IS_ERR(regmap)) {
+		ret = PTR_ERR(regmap);
+		dev_err(dev, "Regmap allocation failed: %d\n", ret);
+		return ret;
+	}
+
+	return sx125x_regmap_probe(dev, regmap, rdev->nr);
+}
+
+static int sx125x_con_remove(struct sx130x_radio_device *rdev)
+{
+	return sx125x_regmap_remove(&rdev->dev);
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id sx125x_con_of_match[] = {
+	{ .compatible = "semtech,sx1255" },
+	{ .compatible = "semtech,sx1257" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, sx125x_con_of_match);
+#endif
+
+static struct sx130x_radio_driver sx125x_con_driver = {
+	.probe  = sx125x_con_probe,
+	.remove = sx125x_con_remove,
+	.driver = {
+		.name = "sx125x_con",
+		.of_match_table = of_match_ptr(sx125x_con_of_match),
+	},
+};
+#endif
+
 #ifdef CONFIG_LORA_SX125X_SPI
 static int sx125x_spi_probe(struct spi_device *spi)
 {
@@ -157,6 +204,13 @@ static int __init sx125x_init(void)
 		return ret;
 	}
 #endif
+#ifdef CONFIG_LORA_SX125X_CON
+	ret = sx130x_register_radio_driver(&sx125x_con_driver);
+	if (ret < 0) {
+		pr_err("failed to init sx125x con (%d)\n", ret);
+		return ret;
+	}
+#endif
 
 	return ret;
 }
@@ -167,6 +221,9 @@ static void __exit sx125x_exit(void)
 #ifdef CONFIG_LORA_SX125X_SPI
 	spi_unregister_driver(&sx125x_spi_driver);
 #endif
+#ifdef CONFIG_LORA_SX125X_CON
+	sx130x_unregister_radio_driver(&sx125x_con_driver);
+#endif
 }
 module_exit(sx125x_exit);
 
-- 
2.19.1

