From dcad3d5bb9e9bd2f11cee75854424cc3f7983749 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20F=C3=A4rber?= <afaerber@suse.de>
Date: Tue, 7 Aug 2018 23:46:16 +0200
Subject: [PATCH 41/64] net: lora: ting01m: Implement gpio_chip
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Clean up previous test code.

Signed-off-by: Andreas FÃ¤rber <afaerber@suse.de>
---
 drivers/net/lora/ting01m.c     | 47 ++++++++++++++++++++++++----------
 drivers/net/lora/ting01m.h     |  6 +++--
 drivers/net/lora/ting01m_cmd.c | 10 --------
 3 files changed, 38 insertions(+), 25 deletions(-)

diff --git a/drivers/net/lora/ting01m.c b/drivers/net/lora/ting01m.c
index 9562e932065b..d090e1ad473b 100644
--- a/drivers/net/lora/ting01m.c
+++ b/drivers/net/lora/ting01m.c
@@ -8,6 +8,7 @@
 
 #include <linux/delay.h>
 #include <linux/gpio/consumer.h>
+#include <linux/gpio/driver.h>
 #include <linux/lora.h>
 #include <linux/module.h>
 #include <linux/netdevice.h>
@@ -30,6 +31,19 @@ static void widora_reset_mcu(struct widora_device *widev)
 	msleep(500);
 }
 
+#ifdef CONFIG_GPIOLIB
+static void ting01m_gpio_set(struct gpio_chip *chip, unsigned int offset, int val)
+{
+	struct widora_device *widev = gpiochip_get_data(chip);
+	static const char * const gpio_names[] = { "B0", "D0" };
+
+	if (offset >= ARRAY_SIZE(gpio_names))
+		return;
+
+	widora_set_gpio(widev, gpio_names[offset][0], gpio_names[offset][1], val != 0, HZ);
+}
+#endif
+
 static u32 ting01m_get_freq(struct net_device *netdev)
 {
 	struct ting01m_priv *priv = netdev_priv(netdev);
@@ -170,18 +184,6 @@ static int widora_probe(struct serdev_device *sdev)
 	dev_info(&sdev->dev, "firmware version: %s\n", sz);
 	kfree(sz);
 
-	ret = widora_set_gpio_pb0(widev, true, HZ);
-	if (ret) {
-		dev_err(&sdev->dev, "Failed to set GPIO PB0 (%d)\n", ret);
-		goto err_gpio;
-	}
-
-	ret = widora_set_gpio_pd0(widev, true, HZ);
-	if (ret) {
-		dev_err(&sdev->dev, "Failed to set GPIO PD0 (%d)\n", ret);
-		goto err_gpio;
-	}
-
 	widev->netdev = alloc_loradev(sizeof(struct ting01m_priv));
 	if (!widev->netdev) {
 		ret = -ENOMEM;
@@ -195,6 +197,19 @@ static int widora_probe(struct serdev_device *sdev)
 	priv->lora.get_freq = ting01m_get_freq;
 	priv->freq = 433000000;
 
+#ifdef CONFIG_GPIOLIB
+	widev->gpio.owner = THIS_MODULE;
+	widev->gpio.parent = &sdev->dev;
+	widev->gpio.label = dev_name(&sdev->dev);
+	widev->gpio.set = ting01m_gpio_set;
+	widev->gpio.base = -1;
+	widev->gpio.ngpio = 2;
+	widev->gpio.can_sleep = 1;
+	ret = gpiochip_add_data(&widev->gpio, widev);
+	if (ret)
+		goto err_gpiochip_add;
+#endif
+
 	ret = register_loradev(widev->netdev);
 	if (ret)
 		goto err_register_loradev;
@@ -204,9 +219,12 @@ static int widora_probe(struct serdev_device *sdev)
 	return 0;
 
 err_register_loradev:
+#ifdef CONFIG_GPIOLIB
+	gpiochip_remove(&widev->gpio);
+err_gpiochip_add:
+#endif
 	free_loradev(widev->netdev);
 err_alloc_loradev:
-err_gpio:
 err_version:
 err_reset:
 	serdev_device_close(sdev);
@@ -220,6 +238,9 @@ static void widora_remove(struct serdev_device *sdev)
 	struct widora_device *widev = serdev_device_get_drvdata(sdev);
 
 	unregister_loradev(widev->netdev);
+#ifdef CONFIG_GPIOLIB
+	gpiochip_remove(&widev->gpio);
+#endif
 	free_loradev(widev->netdev);
 
 	serdev_device_close(sdev);
diff --git a/drivers/net/lora/ting01m.h b/drivers/net/lora/ting01m.h
index 127d86eb6741..fd07d1a01f75 100644
--- a/drivers/net/lora/ting01m.h
+++ b/drivers/net/lora/ting01m.h
@@ -10,6 +10,7 @@
 
 #include <linux/delay.h>
 #include <linux/gpio/consumer.h>
+#include <linux/gpio/driver.h>
 #include <linux/netdevice.h>
 #include <linux/serdev.h>
 
@@ -18,6 +19,9 @@ struct widora_device {
 	struct net_device *netdev;
 
 	struct gpio_desc *rst;
+#ifdef CONFIG_GPIOLIB
+	struct gpio_chip gpio;
+#endif
 
 	char rx_buf[4096];
 	int rx_len;
@@ -32,7 +36,5 @@ int widora_do_reset(struct widora_device *widev, unsigned long timeout);
 int widora_get_version(struct widora_device *widev, char **version, unsigned long timeout);
 
 int widora_set_gpio(struct widora_device *widev, char bank, char pin, bool enabled, unsigned long timeout);
-int widora_set_gpio_pb0(struct widora_device *widev, bool enabled, unsigned long timeout);
-int widora_set_gpio_pd0(struct widora_device *widev, bool enabled, unsigned long timeout);
 
 #endif /* LORA_TING01M_H */
diff --git a/drivers/net/lora/ting01m_cmd.c b/drivers/net/lora/ting01m_cmd.c
index 3d8a677453d3..9ee61e0f13eb 100644
--- a/drivers/net/lora/ting01m_cmd.c
+++ b/drivers/net/lora/ting01m_cmd.c
@@ -108,13 +108,3 @@ int widora_set_gpio(struct widora_device *widev, char bank, char pin, bool enabl
 
 	return widora_simple_cmd(widev, cmd, timeout);
 }
-
-int widora_set_gpio_pb0(struct widora_device *widev, bool enabled, unsigned long timeout)
-{
-	return widora_set_gpio(widev, 'B', '0', enabled, timeout);
-}
-
-int widora_set_gpio_pd0(struct widora_device *widev, bool enabled, unsigned long timeout)
-{
-	return widora_set_gpio(widev, 'D', '0', enabled, timeout);
-}
-- 
2.19.1

